//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.1.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Musashi {
  public static uint m68k_read_memory_8(uint address) {
    uint ret = MusashiPINVOKE.m68k_read_memory_8(address);
    return ret;
  }

  public static uint m68k_read_memory_16(uint address) {
    uint ret = MusashiPINVOKE.m68k_read_memory_16(address);
    return ret;
  }

  public static uint m68k_read_memory_32(uint address) {
    uint ret = MusashiPINVOKE.m68k_read_memory_32(address);
    return ret;
  }

  public static uint m68k_read_immediate_16(uint address) {
    uint ret = MusashiPINVOKE.m68k_read_immediate_16(address);
    return ret;
  }

  public static uint m68k_read_immediate_32(uint address) {
    uint ret = MusashiPINVOKE.m68k_read_immediate_32(address);
    return ret;
  }

  public static uint m68k_read_pcrelative_8(uint address) {
    uint ret = MusashiPINVOKE.m68k_read_pcrelative_8(address);
    return ret;
  }

  public static uint m68k_read_pcrelative_16(uint address) {
    uint ret = MusashiPINVOKE.m68k_read_pcrelative_16(address);
    return ret;
  }

  public static uint m68k_read_pcrelative_32(uint address) {
    uint ret = MusashiPINVOKE.m68k_read_pcrelative_32(address);
    return ret;
  }

  public static uint m68k_read_disassembler_8(uint address) {
    uint ret = MusashiPINVOKE.m68k_read_disassembler_8(address);
    return ret;
  }

  public static uint m68k_read_disassembler_16(uint address) {
    uint ret = MusashiPINVOKE.m68k_read_disassembler_16(address);
    return ret;
  }

  public static uint m68k_read_disassembler_32(uint address) {
    uint ret = MusashiPINVOKE.m68k_read_disassembler_32(address);
    return ret;
  }

  public static void m68k_write_memory_8(uint address, uint value) {
    MusashiPINVOKE.m68k_write_memory_8(address, value);
  }

  public static void m68k_write_memory_16(uint address, uint value) {
    MusashiPINVOKE.m68k_write_memory_16(address, value);
  }

  public static void m68k_write_memory_32(uint address, uint value) {
    MusashiPINVOKE.m68k_write_memory_32(address, value);
  }

  public static void m68k_write_memory_32_pd(uint address, uint value) {
    MusashiPINVOKE.m68k_write_memory_32_pd(address, value);
  }

  public static void m68k_set_int_ack_callback(SWIGTYPE_p_f_int__int callback) {
    MusashiPINVOKE.m68k_set_int_ack_callback(SWIGTYPE_p_f_int__int.getCPtr(callback));
  }

  public static void m68k_set_bkpt_ack_callback(SWIGTYPE_p_f_unsigned_int__void callback) {
    MusashiPINVOKE.m68k_set_bkpt_ack_callback(SWIGTYPE_p_f_unsigned_int__void.getCPtr(callback));
  }

  public static void m68k_set_reset_instr_callback(SWIGTYPE_p_f_void__void callback) {
    MusashiPINVOKE.m68k_set_reset_instr_callback(SWIGTYPE_p_f_void__void.getCPtr(callback));
  }

  public static void m68k_set_pc_changed_callback(SWIGTYPE_p_f_unsigned_int__void callback) {
    MusashiPINVOKE.m68k_set_pc_changed_callback(SWIGTYPE_p_f_unsigned_int__void.getCPtr(callback));
  }

  public static void m68k_set_tas_instr_callback(SWIGTYPE_p_f_void__int callback) {
    MusashiPINVOKE.m68k_set_tas_instr_callback(SWIGTYPE_p_f_void__int.getCPtr(callback));
  }

  public static void m68k_set_illg_instr_callback(SWIGTYPE_p_f_int__int callback) {
    MusashiPINVOKE.m68k_set_illg_instr_callback(SWIGTYPE_p_f_int__int.getCPtr(callback));
  }

  public static void m68k_set_fc_callback(SWIGTYPE_p_f_unsigned_int__void callback) {
    MusashiPINVOKE.m68k_set_fc_callback(SWIGTYPE_p_f_unsigned_int__void.getCPtr(callback));
  }

  public static void m68k_set_instr_hook_callback(SWIGTYPE_p_f_unsigned_int__void callback) {
    MusashiPINVOKE.m68k_set_instr_hook_callback(SWIGTYPE_p_f_unsigned_int__void.getCPtr(callback));
  }

  public static void m68k_set_cpu_type(uint cpu_type) {
    MusashiPINVOKE.m68k_set_cpu_type(cpu_type);
  }

  public static void m68k_init() {
    MusashiPINVOKE.m68k_init();
  }

  public static void m68k_pulse_reset() {
    MusashiPINVOKE.m68k_pulse_reset();
  }

  public static int m68k_execute(int num_cycles) {
    int ret = MusashiPINVOKE.m68k_execute(num_cycles);
    return ret;
  }

  public static int m68k_cycles_run() {
    int ret = MusashiPINVOKE.m68k_cycles_run();
    return ret;
  }

  public static int m68k_cycles_remaining() {
    int ret = MusashiPINVOKE.m68k_cycles_remaining();
    return ret;
  }

  public static void m68k_modify_timeslice(int cycles) {
    MusashiPINVOKE.m68k_modify_timeslice(cycles);
  }

  public static void m68k_end_timeslice() {
    MusashiPINVOKE.m68k_end_timeslice();
  }

  public static void m68k_set_irq(uint int_level) {
    MusashiPINVOKE.m68k_set_irq(int_level);
  }

  public static void m68k_set_virq(uint level, uint active) {
    MusashiPINVOKE.m68k_set_virq(level, active);
  }

  public static uint m68k_get_virq(uint level) {
    uint ret = MusashiPINVOKE.m68k_get_virq(level);
    return ret;
  }

  public static void m68k_pulse_halt() {
    MusashiPINVOKE.m68k_pulse_halt();
  }

  public static void m68k_pulse_bus_error() {
    MusashiPINVOKE.m68k_pulse_bus_error();
  }

  public static uint m68k_context_size() {
    uint ret = MusashiPINVOKE.m68k_context_size();
    return ret;
  }

  public static uint m68k_get_context(SWIGTYPE_p_void dst) {
    uint ret = MusashiPINVOKE.m68k_get_context(SWIGTYPE_p_void.getCPtr(dst));
    return ret;
  }

  public static void m68k_set_context(SWIGTYPE_p_void dst) {
    MusashiPINVOKE.m68k_set_context(SWIGTYPE_p_void.getCPtr(dst));
  }

  public static void m68k_state_register(string type, int index) {
    MusashiPINVOKE.m68k_state_register(type, index);
  }

  public static uint m68k_get_reg(SWIGTYPE_p_void context, m68k_register_t reg) {
    uint ret = MusashiPINVOKE.m68k_get_reg(SWIGTYPE_p_void.getCPtr(context), (int)reg);
    return ret;
  }

  public static void m68k_set_reg(m68k_register_t reg, uint value) {
    MusashiPINVOKE.m68k_set_reg((int)reg, value);
  }

  public static uint m68k_is_valid_instruction(uint instruction, uint cpu_type) {
    uint ret = MusashiPINVOKE.m68k_is_valid_instruction(instruction, cpu_type);
    return ret;
  }

  public static uint m68k_disassemble(string str_buff, uint pc, uint cpu_type) {
    uint ret = MusashiPINVOKE.m68k_disassemble(str_buff, pc, cpu_type);
    return ret;
  }

  public static uint m68k_disassemble_raw(string str_buff, uint pc, SWIGTYPE_p_unsigned_char opdata, SWIGTYPE_p_unsigned_char argdata, uint cpu_type) {
    uint ret = MusashiPINVOKE.m68k_disassemble_raw(str_buff, pc, SWIGTYPE_p_unsigned_char.getCPtr(opdata), SWIGTYPE_p_unsigned_char.getCPtr(argdata), cpu_type);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_char g_ram {
    set {
      MusashiPINVOKE.g_ram_set(SWIGTYPE_p_unsigned_char.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = MusashiPINVOKE.g_ram_get();
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    } 
  }

  public static readonly int FALSE = MusashiPINVOKE.FALSE_get();
  public static readonly int TRUE = MusashiPINVOKE.TRUE_get();
  public static readonly int M68K_IRQ_NONE = MusashiPINVOKE.M68K_IRQ_NONE_get();
  public static readonly int M68K_IRQ_1 = MusashiPINVOKE.M68K_IRQ_1_get();
  public static readonly int M68K_IRQ_2 = MusashiPINVOKE.M68K_IRQ_2_get();
  public static readonly int M68K_IRQ_3 = MusashiPINVOKE.M68K_IRQ_3_get();
  public static readonly int M68K_IRQ_4 = MusashiPINVOKE.M68K_IRQ_4_get();
  public static readonly int M68K_IRQ_5 = MusashiPINVOKE.M68K_IRQ_5_get();
  public static readonly int M68K_IRQ_6 = MusashiPINVOKE.M68K_IRQ_6_get();
  public static readonly int M68K_IRQ_7 = MusashiPINVOKE.M68K_IRQ_7_get();
  public static readonly int M68K_INT_ACK_AUTOVECTOR = MusashiPINVOKE.M68K_INT_ACK_AUTOVECTOR_get();
  public static readonly int M68K_INT_ACK_SPURIOUS = MusashiPINVOKE.M68K_INT_ACK_SPURIOUS_get();
  public static readonly int M68K_CPU_TYPE_INVALID = MusashiPINVOKE.M68K_CPU_TYPE_INVALID_get();
  public static readonly int M68K_CPU_TYPE_68000 = MusashiPINVOKE.M68K_CPU_TYPE_68000_get();
  public static readonly int M68K_CPU_TYPE_68010 = MusashiPINVOKE.M68K_CPU_TYPE_68010_get();
  public static readonly int M68K_CPU_TYPE_68EC020 = MusashiPINVOKE.M68K_CPU_TYPE_68EC020_get();
  public static readonly int M68K_CPU_TYPE_68020 = MusashiPINVOKE.M68K_CPU_TYPE_68020_get();
  public static readonly int M68K_CPU_TYPE_68EC030 = MusashiPINVOKE.M68K_CPU_TYPE_68EC030_get();
  public static readonly int M68K_CPU_TYPE_68030 = MusashiPINVOKE.M68K_CPU_TYPE_68030_get();
  public static readonly int M68K_CPU_TYPE_68EC040 = MusashiPINVOKE.M68K_CPU_TYPE_68EC040_get();
  public static readonly int M68K_CPU_TYPE_68LC040 = MusashiPINVOKE.M68K_CPU_TYPE_68LC040_get();
  public static readonly int M68K_CPU_TYPE_68040 = MusashiPINVOKE.M68K_CPU_TYPE_68040_get();
  public static readonly int M68K_CPU_TYPE_SCC68070 = MusashiPINVOKE.M68K_CPU_TYPE_SCC68070_get();

}
