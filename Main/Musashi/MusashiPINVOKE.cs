//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.1.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


class MusashiPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="SWIGRegisterExceptionCallbacks_Musashi")]
    public static extern void SWIGRegisterExceptionCallbacks_Musashi(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_Musashi")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_Musashi(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_Musashi(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_Musashi(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="SWIGRegisterStringCallback_Musashi")]
    public static extern void SWIGRegisterStringCallback_Musashi(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_Musashi(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static MusashiPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_FALSE_get")]
  public static extern int FALSE_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_TRUE_get")]
  public static extern int TRUE_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_IRQ_NONE_get")]
  public static extern int M68K_IRQ_NONE_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_IRQ_1_get")]
  public static extern int M68K_IRQ_1_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_IRQ_2_get")]
  public static extern int M68K_IRQ_2_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_IRQ_3_get")]
  public static extern int M68K_IRQ_3_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_IRQ_4_get")]
  public static extern int M68K_IRQ_4_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_IRQ_5_get")]
  public static extern int M68K_IRQ_5_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_IRQ_6_get")]
  public static extern int M68K_IRQ_6_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_IRQ_7_get")]
  public static extern int M68K_IRQ_7_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_INT_ACK_AUTOVECTOR_get")]
  public static extern int M68K_INT_ACK_AUTOVECTOR_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_INT_ACK_SPURIOUS_get")]
  public static extern int M68K_INT_ACK_SPURIOUS_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_CPU_TYPE_INVALID_get")]
  public static extern int M68K_CPU_TYPE_INVALID_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_CPU_TYPE_68000_get")]
  public static extern int M68K_CPU_TYPE_68000_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_CPU_TYPE_68010_get")]
  public static extern int M68K_CPU_TYPE_68010_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_CPU_TYPE_68EC020_get")]
  public static extern int M68K_CPU_TYPE_68EC020_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_CPU_TYPE_68020_get")]
  public static extern int M68K_CPU_TYPE_68020_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_CPU_TYPE_68EC030_get")]
  public static extern int M68K_CPU_TYPE_68EC030_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_CPU_TYPE_68030_get")]
  public static extern int M68K_CPU_TYPE_68030_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_CPU_TYPE_68EC040_get")]
  public static extern int M68K_CPU_TYPE_68EC040_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_CPU_TYPE_68LC040_get")]
  public static extern int M68K_CPU_TYPE_68LC040_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_CPU_TYPE_68040_get")]
  public static extern int M68K_CPU_TYPE_68040_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_M68K_CPU_TYPE_SCC68070_get")]
  public static extern int M68K_CPU_TYPE_SCC68070_get();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_read_memory_8")]
  public static extern uint m68k_read_memory_8(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_read_memory_16")]
  public static extern uint m68k_read_memory_16(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_read_memory_32")]
  public static extern uint m68k_read_memory_32(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_read_immediate_16")]
  public static extern uint m68k_read_immediate_16(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_read_immediate_32")]
  public static extern uint m68k_read_immediate_32(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_read_pcrelative_8")]
  public static extern uint m68k_read_pcrelative_8(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_read_pcrelative_16")]
  public static extern uint m68k_read_pcrelative_16(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_read_pcrelative_32")]
  public static extern uint m68k_read_pcrelative_32(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_read_disassembler_8")]
  public static extern uint m68k_read_disassembler_8(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_read_disassembler_16")]
  public static extern uint m68k_read_disassembler_16(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_read_disassembler_32")]
  public static extern uint m68k_read_disassembler_32(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_write_memory_8")]
  public static extern void m68k_write_memory_8(uint jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_write_memory_16")]
  public static extern void m68k_write_memory_16(uint jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_write_memory_32")]
  public static extern void m68k_write_memory_32(uint jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_write_memory_32_pd")]
  public static extern void m68k_write_memory_32_pd(uint jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_int_ack_callback")]
  public static extern void m68k_set_int_ack_callback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_bkpt_ack_callback")]
  public static extern void m68k_set_bkpt_ack_callback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_reset_instr_callback")]
  public static extern void m68k_set_reset_instr_callback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_pc_changed_callback")]
  public static extern void m68k_set_pc_changed_callback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_tas_instr_callback")]
  public static extern void m68k_set_tas_instr_callback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_illg_instr_callback")]
  public static extern void m68k_set_illg_instr_callback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_fc_callback")]
  public static extern void m68k_set_fc_callback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_instr_hook_callback")]
  public static extern void m68k_set_instr_hook_callback(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_cpu_type")]
  public static extern void m68k_set_cpu_type(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_init")]
  public static extern void m68k_init();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_pulse_reset")]
  public static extern void m68k_pulse_reset();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_execute")]
  public static extern int m68k_execute(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_cycles_run")]
  public static extern int m68k_cycles_run();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_cycles_remaining")]
  public static extern int m68k_cycles_remaining();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_modify_timeslice")]
  public static extern void m68k_modify_timeslice(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_end_timeslice")]
  public static extern void m68k_end_timeslice();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_irq")]
  public static extern void m68k_set_irq(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_virq")]
  public static extern void m68k_set_virq(uint jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_get_virq")]
  public static extern uint m68k_get_virq(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_pulse_halt")]
  public static extern void m68k_pulse_halt();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_pulse_bus_error")]
  public static extern void m68k_pulse_bus_error();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_context_size")]
  public static extern uint m68k_context_size();

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_get_context")]
  public static extern uint m68k_get_context(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_context")]
  public static extern void m68k_set_context(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_state_register")]
  public static extern void m68k_state_register(string jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_get_reg")]
  public static extern uint m68k_get_reg(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_set_reg")]
  public static extern void m68k_set_reg(int jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_is_valid_instruction")]
  public static extern uint m68k_is_valid_instruction(uint jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_disassemble")]
  public static extern uint m68k_disassemble(string jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_m68k_disassemble_raw")]
  public static extern uint m68k_disassemble_raw(string jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_g_ram_set")]
  public static extern void g_ram_set(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("Musashi", EntryPoint="CSharp_g_ram_get")]
  public static extern global::System.IntPtr g_ram_get();
}
